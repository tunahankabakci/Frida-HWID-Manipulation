/*
 * Auto-generated by Frida. Please modify to match the signature of RegGetValueW.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */




{
  /**
   * Called synchronously when about to call RegGetValueW.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    state.key = args[2].readUtf16String();
    state.value = args[5];
    //log(key + "   Old Value ==> " + args[5].readUtf16String())
    //args[1].writeUtf16String("");
    //args[2].writeUtf16String("");
    //args[5].writeUtf16String(guid());
    //log(key + "   New Value ==> " + args[5].readUtf16String())
  },

  /**
   * Called synchronously when about to return from RegGetValueW.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
        });
    }
    function randomString(len, charSet) {
      charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      var randomString = '';
      for (var i = 0; i < len; i++) {
        var randomPoz = Math.floor(Math.random() * charSet.length);
        randomString += charSet.substring(randomPoz,randomPoz+1);
      }
      return randomString;
    }
    function getRndInteger(min, max) {
      return Math.floor(Math.random() * (max - min + 1) ) + min;
    }



    if(state.key == "MachineGuid"){
      id = guid();
      state.value.writeUtf16String(id);
      log("New Value of " + state.key + " ==> " + id);
    } 
    else if(state.key == "SusClientId"){
      id = guid();
      state.value.writeUtf16String(id);
      log("New Value of " + state.key + " ==> " + id);
    }
    else if(state.key == "ProductId"){
      id = randomString(5) + "-" + randomString(5) + "-" + randomString(5) + "-" + randomString(5)
      state.value.writeUtf16String(id);
      log("New Value of " + state.key + " ==> " + id);
    }
    else if(state.key == "InstallDate"){
      time = getRndInteger(1000000000, 1600000000);
      state.value.writeU32(time);
      log("New Value of " + state.key + " ==> " + time);
    }
    else if(state.key == "RegisteredOwner"){
      owner = randomString(getRndInteger(5,13));
      state.value.writeUtf16String(owner);
      log("New Value of " + state.key + " ==> " + owner);
    }
  }
}
