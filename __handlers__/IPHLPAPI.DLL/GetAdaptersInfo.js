/*
 * Auto-generated by Frida. Please modify to match the signature of GetAdaptersInfo.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call GetAdaptersInfo.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log('******************************************');
    state.val = args[0];
    state.size = args[1].readInt();
  },

  /**
   * Called synchronously when about to return from GetAdaptersInfo.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
        });
    }

    function getRndInteger(min, max) {
      return Math.floor(Math.random() * (max - min + 1) ) + min;
    }

    // AdapterName start: 12 cost:260
    // Description start:12+260  cost:132
    // Adress Length start: 12 + 260 + 132  cost: 4
    // 1 adapter size 704
    
    next = state.val;
    for (var i = 0 ; i < state.size/704; i++){
      description = next.add(8 + 260).readAnsiString(); // Adapter Name
      name = next.add(8).readAnsiString();    //Adapter Guid
      log("Old Name ==> " + description);
      log("Old Guid ==> " + name);

      new_name = "{" + guid().toUpperCase() + "}";       // new Guid
      next.add(8).writeAnsiString(new_name);
      log("New Guid ==> " + new_name);
      //len = next.add(8 + 260 + 132).readInt();
      x1 = getRndInteger(1,255);
      x2 = getRndInteger(1,255);
      x3 = getRndInteger(1,255);
      x4 = getRndInteger(1,255);
      x5 = getRndInteger(1,255);
      x6 = getRndInteger(1,255);
      next.add(8 + 260 + 132 + 4).writeByteArray([x1, x2, x3, x4, x5, x6]);   //mac adress
      new_mac = x1.toString(16).toUpperCase() + ":" + x2.toString(16).toUpperCase() + ":" + x3.toString(16).toUpperCase() + ":" + x4.toString(16).toUpperCase() + ":" + x5.toString(16).toUpperCase() + ":" + x6.toString(16).toUpperCase();
      log("New Mac ==> " + new_mac)
      next = next.readPointer();
    }

/*
    next = state.val.readPointer();
    state.val.add(12).writeAnsiString("{" + guid().toUpperCase() + "}");
    log(state.val.add(12).readAnsiString())
    log(state.val.add(12 + 260).readAnsiString())
    log(state.val.add(12 + 260 + 132).readInt())
    state.val.add(12 + 260 + 132 + 4).writeByteArray([getRndInteger(1,255), getRndInteger(1,255), getRndInteger(1,255), getRndInteger(1,255), getRndInteger(1,255), getRndInteger(1,255)])
    log(next.add(12).readAnsiString())*/
    /*
    var next = state.val;
    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();
    log(next)

    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();
    
    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();
    
    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();
    
    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();
    
    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();
    
    log(next.add(12).readAnsiString());
    log(next.add(12 + 260).readAnsiString());
    log(next.add(12 + 260 + 132).readInt());
    next = next.readPointer();*/
  }
}
